ggplot() + aes(x= lstat, y = medv) + geom_point()
model1
names(model1)
model1$coefficients
model1$coefficients[1]
Boston %>%
ggplot() + aes(x= lstat, y = medv) + geom_point() + geom_abline(slope = model1$coefficients[2] )
Boston %>%
ggplot() + aes(x= lstat, y = medv) + geom_point() + geom_abline(slope = model1$coefficients[2], intercept = model1$coefficients[1] )
plot(Boston$lstat, Boston$medv)
abline(model1)
Boston %>%
ggplot() + aes(x= lstat, y = medv) + geom_point() + geom_abline(slope = model1$coefficients[2], intercept = model1$coefficients[1] )
Boston %>%
ggplot() + aes(x= lstat, y = medv) + geom_point() + geom_abline(slope = model1$coefficients[2], intercept = model1$coefficients[1] ) + theme_minimal()
plot(Boston$lstat, Boston$medv)
abline(model1)
Boston %>%
ggplot() + aes(x= lstat, y = medv) + geom_point() + geom_abline(slope = model1$coefficients[2], intercept = model1$coefficients[1] ) + theme_minimal()
plot(Boston$lstat, Boston$medv)
abline(model, lwd=3)
abline(model1, lwd=3)
abline(model1, lwd=5)
abline(model1)
plot(Boston$lstat, Boston$medv)
abline(model1)
abline(model1, lwd = 3)
abline(model1, lwd = 6)
abline(model1, lwd = 3)
abline(model1, lwd = 3)
abline(model1, lwd = 3, col = "red")
abline(model1, lwd = 3, col = "red")
plot(Boston$lstat, Boston$medv, pch = 20)
abline(model1, lwd = 3, col = "red")
plot(Boston$lstat, Boston$medv,col = "red", pch = 20)
plot(1:20,1:20)
plot(1:20,1:20, pch = 1:20)
Boston %>%
ggplot() + aes(x= lstat, y = medv) + geom_point() + geom_abline(slope = model1$coefficients[2], intercept = model1$coefficients[1] ) + theme_minimal()
?geom_abline
Boston %>%
ggplot() + aes(x= lstat, y = medv) + geom_point() + geom_abline(slope = model1$coefficients[2], intercept = model1$coefficients[1], linewidth= 3 ) + theme_minimal()
Boston %>%
ggplot() + aes(x= lstat, y = medv) + geom_point() + geom_abline(slope = model1$coefficients[2], intercept = model1$coefficients[1], linewidth= 2 ) + theme_minimal()
Boston %>%
ggplot() + aes(x= lstat, y = medv) + geom_point() + geom_abline(slope = model1$coefficients[2], intercept = model1$coefficients[1], linewidth= 2, color = "red" ) + theme_minimal()
plot(model1)
#| eval: false
plot(model1)
#| eval: false
names(plot(model1))
#| eval: false
plot(model1)
par(mfrow = c(2,2))
plot(model1)
model1$residuals
model1$residuals %>% as_tibble
plot(model1$fitted.values, model1$residuals)
par()
plot(model1$fitted.values, model1$residuals)
?par
par(mfrow = c(1,1))
plot(model1$fitted.values, model1$residuals)
model1$residuals %>% as_tibble
model1$residuals %>% as_tibble
model1$residuals %>% as_tibble %>%
mutate(resFunc = residuals(model1))
plot(model1$fitted.values, model1$residuals)
model1$residuals %>% as_tibble %>%
mutate(resFunc = rstudent(model1))
model1$df.residual %>% as_tibble %>%
mutate(resFunc = rstudent(model1))
model1$terms %>% as_tibble %>%
mutate(resFunc = rstudent(model1))
model1$terms %>% as_tibble
model1$terms %>% as_tibble
model1$terms %>% as_tibble
model1$residuals %>% as_tibble
plot(model1$fitted.values, model1$residuals)
model1$effects
model1$effects %>% as_tibble
print(i)
for i in names(model1)
for i in names(model1)
model1$terms
model1$call
model1$xlevels
model1$df.residual
model1$qr
model1$assign
model1$rank
model1$effects
model1$effects %>% as_tibble
model1$coefficients %>% as_tibble
par(mfrow = c(2,2))
plot(model1)
model1$residuals %>% as_tibble
rstudent(model1)
rstudent(model1) %>% as_tibble()
par(mfrow = c(1,1))
plot(model1$fitted.values, model1$residuals)
plot(model1$fitted.values, rstudent(model1)))
plot(model1$fitted.values, rstudent(model1))
plot(model1$fitted.values, model1$residuals)
plot(model1$fitted.values, rstudent(model1))
plot(model1$fitted.values, model1$residuals)
plot(model1$fitted.values, rstudent(model1))
plot(model1$fitted.values, model1$residuals)
plot(model1$fitted.values, rstudent(model1))
co2_wide <- data.frame(matrix(co2, ncol = 12, byrow = TRUE)) |>
setNames(1:12) |>
mutate(year = as.character(1959:1997))
co2_wide <- data.frame(matrix(co2, ncol = 12, byrow = TRUE)) |>
setNames(1:12) |>
mutate(year = as.character(1959:1997))
knitr::opts_chunk$set(comment=NA, warning = F, message = F)
co2_wide <- data.frame(matrix(co2, ncol = 12, byrow = TRUE)) |>
setNames(1:12) |>
mutate(year = as.character(1959:1997))
library(tidyverse)
co2_wide
co2_wide <- data.frame(matrix(co2, ncol = 12, byrow = TRUE)) |>
setNames(1:12) |>
mutate(year = as.character(1959:1997))
co2_wide
co2_wide
co2_wide %>%
as_tibble()
co2_wide %>%
pivot_longer(
cols = -year, names_to = "month"
)
co2_wide %>%
pivot_longer(
cols = -year, names_to = "month", values_to = "co2"
)
co2_tidy <- co2_wide %>%
pivot_longer(
cols = -year, names_to = "month", values_to = "co2"
)
co2_tidy
co2_tidy <- co2_wide %>%
pivot_longer(
cols = -year, names_to = "month", values_to = "co2"
)
co2_tidy
co2_tidy |> ggplot(aes(month, co2, color = year)) + geom_line()
co2_tidy |> ggplot(aes(month, co2, color = year, group = month)) + geom_line()
co2_tidy |> ggplot(aes(month, co2, color = year)) + geom_line()
class(co2_tidy$month)
co2_tidy
co2_tidy |> ggplot(aes(month, co2, color = year)) + geom_line()
Rewrite your code to make sure the month column is numeric. Then make the plot.
co2_tidy
co2_tidy %>%
mutate(month = as.numeric(month))
co2_tidy %>%
mutate(month = as.numeric(month)) -> co2_tidy
co2_tidy
co2_tidy |> ggplot(aes(month, co2, color = year)) + geom_line()
co2_tidy |> ggplot(aes(month, co2, color = year)) + geom_line(show.legend = F)
co2_tidy |> ggplot(aes(month, co2, color = year)) + geom_line()
co2_tidy |> ggplot(aes(month, co2, color = year)) + geom_line() + scale_colour_viridis_d()
co2_tidy |> ggplot(aes(month, co2, color = year)) + geom_line()
load(admissions)
dslabs::admissions
dslabs::admissions
dslabs::admissions %>% select(-applicants)
dat <- dslabs::admissions %>% select(-applicants)
dat
dat
dat
dat %>%
pivot_wider(names_from = gender, values_from = admitted)
dat
dslabs::admissions
dat
dat %>%
pivot_wider(names_from = gender, values_from = admitted)
dat %>%
pivot_wider(names_from = gender, values_from = admitted) -> dat_tidy
dat_tidy
dslabs::admissions
dslabs::admissions %>% pivot_wider(names_from =gender, values_from = admitted)
dat %>%
pivot_wider(names_from = gender, values_from = admitted) -> dat_tidy
dat_tidy
dslabs::admissions %>% pivot_wider(names_from =gender, values_from = admitted)
dat
dat %>%
pivot_wider(names_from = gender, values_from = admitted)
dslabs::admissions %>% pivot_wider(names_from =gender, values_from = admitted)
dslabs::admissions %>% pivot_wider(names_from =gender, values_from = applicants)
dslabs::admissions %>% pivot_wider(names_from =gender, values_from = c(applicants,admitted))
dslabs::admissions %>% pivot_wider(names_from =gender, values_from = c(applicants,admitted))
dat_tidy
dslabs::admissions
dslabs::admissions %>% pivot_longer(names_to = name, values_to = value)
dslabs::admissions %>% pivot_longer(names_to = "name", values_to = "value")
dslabs::admissions %>% pivot_longer(cols = c(admitted, applicants),names_to = "name", values_to = "value")
dslabs::admissions %>% pivot_longer(cols = c(admitted, applicants),names_to = "name", values_to = "value") -> tmp
::: {.callout-note}
dslabs::admissions %>% pivot_longer(cols = c(admitted, applicants),names_to = "name", values_to = "value") -> tmp
tmp
tmp
tmp
?unite
tmp %>% unite(c(name, gender))
tmp %>% unite(c(name, gender))
tmp %>% unite("col_name",c(name, gender))
tmp %>% unite("col_name",c(name, gender))
tmp %>% unite("col_name",c(name, gender))
tmp %>% unite("col_name",c(name, gender)) %>%
pivot_wider(names_from = col_name, values_from = value)
tmp %>% unite("col_name",c(name, gender)) %>%
pivot_wider(names_from = col_name, values_from = value)
setFixest_etable(markdown = TRUE, drop = "Constant")
# Chunk 1: fig-pairs
#| echo: true
#| label: fig-pairs
#| fig-cap: "Pairwise scatterplot"
#| fig-asp: 1
#| output-location: column
palette("Classic Tableau")
par(
family = "HersheySans",
las = 1, pch = 19, cex = 1.5
)
pairs(
iris[,1:4],
col=iris$Species
)
# Chunk 2
#| echo: true
library(fixest)
mods = feols(
rating ~ complaints + privileges + learning + csw0(raises + critical) + advance,
data = attitude
)
dict = c("rating"     = "Overall Rating",
"complaints" = "Handling of Complaints",
"privileges" = "No Special Priviledges",
"learning"   = "Opportunity to Learn",
"raises"     = "Performance-Based Raises",
"critical"   = "Too Critical",
"advance"    = "Advancement")
# Chunk 3
#| echo: true
#| output-location: slide
library(modelsummary)
options(modelsummary_factory_default = "gt")
modelsummary(
setNames(mods, c("(1)", "(2)")),
coef_map = dict, stars = TRUE,
gof_omit = "Adj|IC|F|Log|RMSE"
) |>
gt::tab_spanner(
label = "Dependent variable: Overall Rating",
columns = 2:3
)
etable(mods, highlight = .("se" = "complaints"), arraystretch = 1.5)
# Approximate locations as factors
data(flights)
#| out-width: 75%
library(threejs)
# Approximate locations as factors
data(flights)
dest = factor(sprintf("%.2f:%.2f", flights[,3], flights[,4]))
# A table of destination frequencies
freq = sort(table(dest), decreasing=TRUE)
# The most frequent destinations in these data
frequent_destinations = names(freq)[1:10]
# Subset the flight data by destination frequency
idx = dest %in% frequent_destinations
frequent_flights = flights[idx, ]
# Lat/long and counts of frequent flights
ll = unique(frequent_flights[, 3:4])
# Plot frequent destinations as bars, and the flights to and from
# them as arcs. Adjust arc width and color by frequency.
globejs(lat=ll[, 1], long=ll[, 2], arcs=frequent_flights,
# bodycolor="#aaaaff", arcsHeight=0.3, arcsLwd=2,
bodycolor="#fff", arcsHeight=0.3, arcsLwd=2,
arcsColor="#ffff00", arcsOpacity=0.15,
atmosphere=TRUE, color="#fff", pointsize=0.5)
#| out-width: 75%
library(threejs)
# Approximate locations as factors
data(flights)
dest = factor(sprintf("%.2f:%.2f", flights[,3], flights[,4]))
# A table of destination frequencies
freq = sort(table(dest), decreasing=TRUE)
# The most frequent destinations in these data
frequent_destinations = names(freq)[1:10]
# Subset the flight data by destination frequency
idx = dest %in% frequent_destinations
frequent_flights = flights[idx, ]
# Lat/long and counts of frequent flights
ll = unique(frequent_flights[, 3:4])
# Plot frequent destinations as bars, and the flights to and from
# them as arcs. Adjust arc width and color by frequency.
globejs(lat=ll[, 1], long=ll[, 2], arcs=frequent_flights,
# bodycolor="#aaaaff", arcsHeight=0.3, arcsLwd=2,
bodycolor="#fff", arcsHeight=0.3, arcsLwd=2,
arcsColor="#ffff00", arcsOpacity=0.15,
atmosphere=TRUE, color="#fff", pointsize=0.5)
library(tidyverse)
library(tidyverse)
library(dslabs)
library(tidyverse)
library(dslabs)
path <- system.file("extdata", package="dslabs")
filename <- file.path(path, "fertility-two-countries-example.csv")
wide_data <- read_csv(filename)
library(tidyverse)
library(dslabs)
path <- system.file("extdata", package="dslabs")
filename <- file.path(path, "fertility-two-countries-example.csv")
wide_data <- read_csv(filename)
wide_data
glimpse(wide_data)
glimpse(wide_data) %>%
slice(10)
glimpse(wide_data) %>%
slice(10)
glimpse(wide_data)
suppressPackageStartupMessages(
library(tidyverse)
library(dslabs)
library(tidyverse)
library(dslabs)
library(tidyverse)
library(dslabs)
suppressPackageStartupMessages({
library(tidyverse)
library(dslabs)
})
suppressPackageStartupMessages({
library(tidyverse)
library(dslabs)
})
path <- system.file("extdata", package="dslabs")
filename <- file.path(path, "fertility-two-countries-example.csv")
wide_data <- read_csv(filename)
wide_data
wide_data
wide_data %>%
pivot_longer(cols = -1, names_to = year, values_to = fertility)
wide_data %>%
pivot_longer(cols = -1, names_to = "year", values_to = "fertility")
wide_data %>%
pivot_longer(cols = `1960`:`2015`, names_to = "year", values_to = "fertility")
wide_data %>%
pivot_longer(cols = -1, names_to = "year", values_to = "fertility")
wide_data %>%
pivot_longer(cols = -1)
wide_data %>%
pivot_longer(cols = -1, names_to = "year", values_to = "fertility")
wide_data %>%
pivot_longer(cols = -1, names_to = "year", values_to = "fertility") -> new_tidy_data
new_tidy_data
gapminder
gapminder %>%
filter(country %in% c("South Korea", "Germany"))
gapminder %>%
filter(country %in% c("South Korea", "Germany"), !is.na(fertility))
gapminder::gapminder
gapminder::gapminder_unfiltered
new_tidy_data
new_tidy_data %>%
mutate(year = as.numeric(year))
new_tidy_data %>%
mutate(year = as.numeric(year)) %>%
ggplot() + aes(x = year, y = fertility, color = country) + geom_point()
new_tidy_data %>%
mutate(year = as.numeric(year)) %>%
ggplot() + aes(x = year, y = fertility, color = country) + geom_line()
new_tidy_data
new_tidy_data %>%
pivot_wider(names_from = year, values_from = fertility)
new_tidy_data %>%
pivot_wider(names_from = year, values_from = fertility) -> new_wide_data
new_wide_data %>% select(1:5)
new_wide_data %>% select(1:8)
path <- system.file("extdata", package = "dslabs")
filename <- "life-expectancy-and-fertility-two-countries-example.csv"
filename <-  file.path(path, filename)
raw_dat <- read_csv(filename)
raw_dat
raw_dat %>%
select(1:5)
knitr::opts_chunk$set(comment=NA, warning = F, message = F)
co2_tidy <- co2_wide %>%
pivot_longer(
cols = -year, names_to = "month", values_to = "co2"
)
#| include: false
rm(list = ls())
#| include: false
library(tidyverse)
co2_wide <- data.frame(matrix(co2, ncol = 12, byrow = TRUE)) |>
setNames(1:12) |>
mutate(year = as.character(1959:1997))
co2_wide <- data.frame(matrix(co2, ncol = 12, byrow = TRUE)) |>
setNames(1:12) |>
mutate(year = as.character(1959:1997))
co2_wide %>%
as_tibble()
co2_tidy <- co2_wide %>%
pivot_longer(
cols = -year, names_to = "month", values_to = "co2"
)
co2_tidy
co2_tidy |> ggplot(aes(month, co2, color = year)) + geom_line()
# resolves with a distrupted plot
class(co2_tidy$month)
co2_tidy %>%
mutate(month = as.numeric(month)) -> co2_tidy
co2_tidy |> ggplot(aes(month, co2, color = year)) + geom_line()
dat <- dslabs::admissions %>% select(-applicants)
dat %>%
pivot_wider(names_from = gender, values_from = admitted) -> dat_tidy
dat_tidy
dslabs::admissions %>% pivot_wider(names_from =gender, values_from = c(applicants,admitted))
dslabs::admissions %>% pivot_wider(names_from =gender, values_from = c(applicants,admitted))
dslabs::admissions %>% pivot_longer(cols = c(admitted, applicants),names_to = "name", values_to = "value") -> tmp
tmp
tmp %>% unite("col_name",c(name, gender))
tmp %>% unite("col_name",c(name, gender)) %>%
pivot_wider(names_from = col_name, values_from = value)
library(tidyverse)
library(tidymodels)
rm(list = ls())
mpg
linear_reg() %>%
set_mode("regression") %>%
set_engine("lm") %>%
fit(hwy ~ displ, mpg)
linear_reg() %>%
set_mode("regression") %>%
set_engine("lm") %>%
fit(hwy ~ displ, mpg) %>%
pluck("fit")
linear_reg() %>%
set_mode("regression") %>%
set_engine("lm") %>%
fit(hwy ~ displ, mpg) %>%
pluck("summary")
linear_reg() %>%
set_mode("regression") %>%
set_engine("lm") %>%
fit(hwy ~ displ, mpg) %>%
pluck("fit")
linear_reg() %>%
set_mode("regression") %>%
set_engine("lm") %>%
fit(hwy ~ displ, mpg) %>%
pluck("fit") %>%
tidy()
linear_reg() %>%
set_mode("regression") %>%
set_engine("lm") %>%
fit(hwy ~ displ, mpg) %>%
pluck("fit") %>%
tidy()
?pluck
linear_reg() %>%
set_mode("regression") %>%
set_engine("lm") %>%
fit(hwy ~ displ, mpg) %>%
pluck("fit") %>%
summary()
library(tidyverse)
read_csv("/Users/mucahitzor/Downloads/penguins.csv")
data = read_csv("/Users/mucahitzor/Downloads/penguins.csv")
data
data <- read_csv("/Users/mucahitzor/Downloads/penguins.csv")
data
data %>%
group_by(species, sex) %>%
summarise(n = n())
data %>%
group_by(species, sex) %>%
drop_na() %>%
summarise(n = n())
source("~/.active-rstudio-document", echo=TRUE)
data %>%
group_by(island, sex) %>%
drop_na() %>%
summarise(n = n())
data
data %>%
ggplot() + aes(x=flipper_length_mm, y = body_mass_g, color = sex) + geom_point()
library(tidyverse)
read_csv("/Users/mucahitzor/Downloads/ecn465dd/BUS210/19102023/penguins.csv")
data = read_csv("/Users/mucahitzor/Downloads/ecn465dd/BUS210/19102023/penguins.csv")
library(tidyverse)
data = read_csv("/Users/mucahitzor/Downloads/ecn465dd/BUS210/19102023/penguins.csv")
data
data %>%
drop_na()
cwd
pwd()
cwd()
wd()
getwd()
setwd("/Users/mucahitzor/Downloads/ecn465dd/BUS210/19102023")
data %>%
drop_na() %>%
write_csv("penguins.csv")
rm(list = ls())
data = read_csv("/Users/mucahitzor/Downloads/ecn465dd/BUS210/19102023/penguins.csv")
data
